<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodingStar|编程星</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codingstar.cn/"/>
  <updated>2017-03-21T03:34:23.190Z</updated>
  <id>http://codingstar.cn/</id>
  
  <author>
    <name>iCodingStar</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java编程思想(note)</title>
    <link href="http://codingstar.cn//blog/2017/02/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3.html"/>
    <id>http://codingstar.cn//blog/2017/02/18/读书笔记-Java编程思想.html</id>
    <published>2017-02-18T06:11:31.000Z</published>
    <updated>2017-03-21T03:34:23.190Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://codingstar.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++Primer(note)</title>
    <link href="http://codingstar.cn//blog/2017/02/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-C++Primer-%E7%AC%AC5%E7%89%88.html"/>
    <id>http://codingstar.cn//blog/2017/02/18/读书笔记-C++Primer-第5版.html</id>
    <published>2017-02-18T06:08:06.000Z</published>
    <updated>2017-03-21T03:34:23.189Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://codingstar.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>c与指针(note)</title>
    <link href="http://codingstar.cn//blog/2017/02/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-c%E4%B8%8E%E6%8C%87%E9%92%88.html"/>
    <id>http://codingstar.cn//blog/2017/02/18/读书笔记-c与指针.html</id>
    <published>2017-02-18T02:49:28.000Z</published>
    <updated>2017-03-21T03:34:23.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h1 id="操作符和表达式"><a href="#操作符和表达式" class="headerlink" title="操作符和表达式"></a>操作符和表达式</h1><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>   c的函数与其它函数相似之处甚多。本章正式描述c的函数。</p>
<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>   类型<br>   函数名（形式参数）<br>   代码块<br>   <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function_name()</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="程序7-1-在数组中寻找一个整型值"><a href="#程序7-1-在数组中寻找一个整型值" class="headerlink" title="程序7.1:在数组中寻找一个整型值"></a>程序7.1:在数组中寻找一个整型值</h3><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">** 在数组中寻找某个特定值的存储位置，并返回一个指向该位置的指针</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">int</span> *</span></div><div class="line"><span class="title">find_int</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> array_len)</span> &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array_len; ++i) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] == key) &#123;</div><div class="line">            <span class="keyword">return</span> &amp;<span class="built_in">array</span>[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>   当编译器遇到一个函数调用时，它产生代码传递参数并调用这个函数，而且接收函数返回值（如果这个函数有返回值的话）。但是编译器如何知道这个函数接受的是什么类型的和多少数量的参数呢？如何知道函数的返回值类型呢？   </p>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ol>
<li>如果同一源文件的前面已经出现了该函数的定义，编译器就会记住它的参数数量和类型。</li>
<li>使用函数原型。原型总结了函数定义的起始部分的声明，向编译器提供了如何调用该元素的完整信息。使用原型最方便的方法是把原型置于一个单独的文件，当其他源文件需要<br>这个函数原型时，就是用<code>#include</code>指令包含该文件。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 函数原型:注意最后面的那个分号，它区分了函数原型和函数定义的起始部分。原型告诉编译器函数的参数数量和每个参数的类型以及函数的返回类型。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> *</span></div><div class="line"><span class="title">find_int</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> array_len)</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="总结：从几个方面看，第2种方法比第1种方法更好。"><a href="#总结：从几个方面看，第2种方法比第1种方法更好。" class="headerlink" title="总结：从几个方面看，第2种方法比第1种方法更好。"></a>总结：从几个方面看，第2种方法比第1种方法更好。</h4><ol>
<li>现在函数原型具有文件作用域。原型的一份拷贝可以作用于整个源文件，较之在函数每次调用前单独写一份原型要容易的多。</li>
<li>现在函数原型只书写一次，这样就不会出现函数的多份原型的拷贝之间不一致的现象。</li>
<li>如果对函数的定义进行了修改，我们只需要修改原型，并重新编译所有包含了该原型的源文件即可。</li>
<li>如果函数的原型同时被<code>#include</code>指令包含到定义的源文件中，编译器就可以确认函数原型与函数定义是否一致。</li>
</ol>
<h4 id="思考：含糊声明存在危害。"><a href="#思考：含糊声明存在危害。" class="headerlink" title="思考：含糊声明存在危害。"></a>思考：含糊声明存在危害。</h4><ol>
<li>考虑下面声明，它看上去有点含糊：<br><code>int * func();</code></li>
<li>它即可以看作是一个旧式的声明(只给出func函数的返回类型),也可以看作是新式的没有参数的函数声明。最终，它会被解释成旧式风格的函数声明，目的是保持与ANSI标准之前的程序的兼容性。一个没有参数的函数声明应该写成如下的样子：<br><code>int * func(void);</code></li>
<li>关键字void提示没有任何参数，而不是表示它是一个类型为void的参数。</li>
</ol>
<h3 id="函数的缺省认定"><a href="#函数的缺省认定" class="headerlink" title="函数的缺省认定"></a>函数的缺省认定</h3><ol>
<li>当函数调用一个无法见到原型的函数时，编译器会认为函数返回一个整型值。对于那些不返回整型的函数，这种认定会引起错误。</li>
</ol>
<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><ol>
<li>c函数所有参数均以”传值调用”的方式进行传递。这意味着函数将获得参数值的一份拷贝，这样函数可以放心的修改这个拷贝值。而不必担心修改函数调用程序实际传给它的参数。这种调用与Modula和Pascal中的值参数（不是var参数）相同。</li>
<li>但是如果被传递的参数是一个数组名，并且在函数中使用数组的下标引用该数组的参数，那么函数对数组元素进行的修改实际修改的是调用函数程序中的数组元素。函数将访问调用该函数程序的数组元素，数组并不会被复制。这个行为被称为“传址调用”。数组名的值实际上是一个指针，传递给函数的其实是这个指针的一份拷贝。</li>
</ol>
<h3 id="传参规则"><a href="#传参规则" class="headerlink" title="传参规则"></a>传参规则</h3><ol>
<li>传递给函数的标量参数是传值调用的。</li>
<li>传递给函数的数组参数，在行为上就像是它们通过传址调用的。</li>
</ol>
<h3 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h3><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><pre><code><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 程序 7.2 奇偶校验</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">even_parity</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">value</span>, <span class="keyword">int</span> n_bits</span>) &#123;</div><div class="line">    <span class="keyword">int</span> parity = <span class="number">0</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 计数值中为1的位的个数</div><div class="line">     */</div><div class="line">    <span class="keyword">while</span> (n_bits &gt; <span class="number">0</span>) &#123;</div><div class="line">        parity += <span class="keyword">value</span> &amp; <span class="number">1</span>;</div><div class="line">        <span class="keyword">value</span> &gt;&gt;= <span class="number">1</span>;</div><div class="line">        n_bits--;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果计数器的最低位是0,返回TRUE(表示1的位数为偶数个)</span></div><div class="line">    <span class="keyword">return</span> (parity % <span class="number">2</span>) == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li>这个函数在执行过程中会破坏两个参数的值。但这无妨，因为参数是通过值传递调用的。</li>
</ol>
<h4 id="整数交换，无效的版本"><a href="#整数交换，无效的版本" class="headerlink" title="整数交换，无效的版本"></a>整数交换，无效的版本</h4><pre><code><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 程序 7.3a </div><div class="line"> * 交换程序中的两个整数(没有效果)</div><div class="line"> */</div><div class="line">void</div><div class="line"><span class="keyword">swap(int </span>a, int <span class="keyword">b) </span>&#123;</div><div class="line">    int temp = a<span class="comment">;</span></div><div class="line">    a = <span class="keyword">b;</span></div><div class="line">    <span class="keyword">b </span>= temp<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li>这个函数希望修改程序所传递的参数。但是这个程序是无效的，因为它们交换的实际上是参数的拷贝。</li>
</ol>
<h4 id="整数交换，有效的版本"><a href="#整数交换，有效的版本" class="headerlink" title="整数交换，有效的版本"></a>整数交换，有效的版本</h4><p>   为了访问调用程序的值，你必须向程序传递你所希望修改的变量的指针。接着函数必须对指针进行间接访问操作，修改需要改变的变量。<br>   <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 程序 7.3b</div><div class="line"> * 交换程序中的两个整数</div><div class="line"> */</div><div class="line">void</div><div class="line"><span class="keyword">swap(int </span>*a, int *<span class="keyword">b) </span>&#123;</div><div class="line">    int temp<span class="comment">;</span></div><div class="line">    temp = *a<span class="comment">;</span></div><div class="line">    *a = *<span class="keyword">b;</span></div><div class="line">    *<span class="keyword">b </span>= temp<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="将一个数组设置为0"><a href="#将一个数组设置为0" class="headerlink" title="将一个数组设置为0"></a>将一个数组设置为0</h4><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 程序 7.4 把一个数组的所有元素都置为0</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_array</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n_elements)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (n_elements &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">array</span>[--n_elements] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><code>n_elements</code> 是一个标量参数，所以它是传值调用的。在函数中修改它的值并不会影响调用程序中对应参数，另一方面，函数确实把调用函数的数组都置为0.</li>
<li>数组的值实际上是一个指针，下标引用实际上是对这个指针进行间接访问。</li>
<li>在声明数组参数时，不指定它的长度是合法的，因为函数并不为数组分配内存。间接访问操作将访问调用程序中的数组元素。</li>
</ol>
<h3 id="ADT-和-黑盒"><a href="#ADT-和-黑盒" class="headerlink" title="ADT 和 黑盒"></a>ADT 和 黑盒</h3><ol>
<li>c可以用于设计和实现抽象数据类型，因为它可以限制函数和数据定义的作用域。，这个技巧也被成为黑盒设计。抽象数据类型的想法是hi很简单的–模块具有功能说明和接口说明，前者说明模块所执行的任务，后者定义模块的使用。</li>
<li>限制对模块的访问时通过 <code>static</code> 的合理使用实现的。</li>
</ol>
<h4 id="地址列表模块案例"><a href="#地址列表模块案例" class="headerlink" title="地址列表模块案例"></a>地址列表模块案例</h4><pre><code>`addresslist.h`
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CHAPTER07_FUNC_ADDRLIST_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CHAPTER07_FUNC_ADDRLIST_H</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 地址列表模块声明</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 数据特征</div><div class="line"> * 各种数据的最大长度，包括结尾的NUL字符和地址的最大数量</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME_LENGTH 30 <span class="comment">/*允许出现的最长名字*/</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDR_LENGTH 100 <span class="comment">/*允许出现地址的最大长度*/</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PHONE_LENGTH 11<span class="comment">/*允许出现的最大号码长度*/</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ADDRESSES 1000<span class="comment">/*允许出现的字多地址个数*/</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 给出一个名字，查找对应的地址</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="keyword">const</span> *</span></div><div class="line"><span class="title">lookup_address</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *name)</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 给出一个名字，查找对应号码</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="keyword">const</span> *</span></div><div class="line"><span class="title">lookup_phone</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *name)</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//CHAPTER07_FUNC_ADDRLIST_H</span></span></div></pre></td></tr></table></figure>

`addresslist.c`
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用于维护一个列表的抽象数据类型</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"addrlist.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 每个地址的三个部分，分别保存在数组的对应元素中</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> name[MAX_ADDRESSES][NAME_LENGTH] = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> address[MAX_ADDRESSES][ADDR_LENGTH] = &#123;<span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> phone[MAX_ADDRESSES][PHONE_LENGTH] = &#123;<span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">** 这个函数在数组中查找一个名字并返回对应下标</div><div class="line">**/</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find_entry</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *name_to_find)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> entry;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> entry = <span class="number">0</span>; entry &lt; MAX_ADDRESSES; ++entry) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(name_to_find, name[entry]) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> entry;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span> <span class="keyword">const</span> *</span></div><div class="line"><span class="title">lookup_address</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *name)</span> &#123;</div><div class="line">    <span class="keyword">int</span> entry;</div><div class="line">    entry = find_entry(name);</div><div class="line">    <span class="keyword">if</span> (entry == <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> address[entry];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span> <span class="keyword">const</span> *</span></div><div class="line"><span class="title">lookup_phone</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *name)</span> &#123;</div><div class="line">    <span class="keyword">int</span> entry;</div><div class="line">    entry = find_entry(name);</div><div class="line">    <span class="keyword">if</span> (entry == <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> phone[entry];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li>黑盒的功能是通过规定的接口访问，在这个例子里，接口是 <code>lookup_address</code> 和 <code>lookup_phone</code>。但是用户不能访问模块实现相关的数据，如数组和辅助函数 <code>find_entry</code>,因为这些内容被声明为 <code>static</code> 。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速上手&quot;&gt;&lt;a href=&quot;#快速上手&quot; class=&quot;headerlink&quot; title=&quot;快速上手&quot;&gt;&lt;/a&gt;快速上手&lt;/h1&gt;&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://codingstar.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
